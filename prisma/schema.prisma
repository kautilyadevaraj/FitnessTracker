// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// run ```prisma migrate dev``` whenever you change the schema

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model User {
  id        String  @id @default(uuid())
  name String?
  email     String  @unique
  username  String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  physicalFitness PhysicalFitness?
 
  @@map("users")
}

model PhysicalFitness {
  id                String    @id @default(uuid())
  userId            String    @unique
  weight            Float     // in kilograms
  height            Float     // in centimeters
  bodyFatPercentage Float?    // optional, as a percentage
  benchPressMax     Float?    // optional, max bench press weight in kilograms
  squatMax          Float?    // optional, max squat weight in kilograms
  deadliftMax       Float?    // optional, max deadlift weight in kilograms
  vo2Max            Float?    // optional, measure of cardiovascular endurance (mL/kg/min)
  flexibility       Float?    // optional, e.g., sit-and-reach score in centimeters
  trainingFrequency Int?      // optional, number of training sessions per week
  trainingExperience String?  // optional, e.g., "beginner", "intermediate", "advanced"
  workoutGoal       String?   // optional, e.g., "strength", "endurance", "hypertrophy", "fat loss"
  lastUpdated       DateTime  @default(now()) @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}